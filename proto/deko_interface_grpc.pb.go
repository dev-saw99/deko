// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: deko_interface.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompileServiceClient is the client API for CompileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompileServiceClient interface {
	CompileSource(ctx context.Context, in *WSInputInterface, opts ...grpc.CallOption) (CompileService_CompileSourceClient, error)
}

type compileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompileServiceClient(cc grpc.ClientConnInterface) CompileServiceClient {
	return &compileServiceClient{cc}
}

func (c *compileServiceClient) CompileSource(ctx context.Context, in *WSInputInterface, opts ...grpc.CallOption) (CompileService_CompileSourceClient, error) {
	stream, err := c.cc.NewStream(ctx, &CompileService_ServiceDesc.Streams[0], "/interface.CompileService/CompileSource", opts...)
	if err != nil {
		return nil, err
	}
	x := &compileServiceCompileSourceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CompileService_CompileSourceClient interface {
	Recv() (*WSOutputInterface, error)
	grpc.ClientStream
}

type compileServiceCompileSourceClient struct {
	grpc.ClientStream
}

func (x *compileServiceCompileSourceClient) Recv() (*WSOutputInterface, error) {
	m := new(WSOutputInterface)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CompileServiceServer is the server API for CompileService service.
// All implementations must embed UnimplementedCompileServiceServer
// for forward compatibility
type CompileServiceServer interface {
	CompileSource(*WSInputInterface, CompileService_CompileSourceServer) error
	mustEmbedUnimplementedCompileServiceServer()
}

// UnimplementedCompileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompileServiceServer struct {
}

func (UnimplementedCompileServiceServer) CompileSource(*WSInputInterface, CompileService_CompileSourceServer) error {
	return status.Errorf(codes.Unimplemented, "method CompileSource not implemented")
}
func (UnimplementedCompileServiceServer) mustEmbedUnimplementedCompileServiceServer() {}

// UnsafeCompileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompileServiceServer will
// result in compilation errors.
type UnsafeCompileServiceServer interface {
	mustEmbedUnimplementedCompileServiceServer()
}

func RegisterCompileServiceServer(s grpc.ServiceRegistrar, srv CompileServiceServer) {
	s.RegisterService(&CompileService_ServiceDesc, srv)
}

func _CompileService_CompileSource_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WSInputInterface)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompileServiceServer).CompileSource(m, &compileServiceCompileSourceServer{stream})
}

type CompileService_CompileSourceServer interface {
	Send(*WSOutputInterface) error
	grpc.ServerStream
}

type compileServiceCompileSourceServer struct {
	grpc.ServerStream
}

func (x *compileServiceCompileSourceServer) Send(m *WSOutputInterface) error {
	return x.ServerStream.SendMsg(m)
}

// CompileService_ServiceDesc is the grpc.ServiceDesc for CompileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interface.CompileService",
	HandlerType: (*CompileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CompileSource",
			Handler:       _CompileService_CompileSource_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "deko_interface.proto",
}
